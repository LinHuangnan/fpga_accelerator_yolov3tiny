// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hls_rect_entry3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hls_rect_entry3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hls_rect_entry3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> hls_rect_entry3::ap_ST_fsm_state1 = "1";
const sc_lv<32> hls_rect_entry3::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool hls_rect_entry3::ap_const_boolean_1 = true;

hls_rect_entry3::hls_rect_entry3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_char1_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char1_out_full_n );

    SC_METHOD(thread_char1_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char1_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char2_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char2_out_full_n );

    SC_METHOD(thread_char2_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char2 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char2_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char3_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char3_out_full_n );

    SC_METHOD(thread_char3_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char3 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char3_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char4_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char4_out_full_n );

    SC_METHOD(thread_char4_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char4 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char4_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char5_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char5_out_full_n );

    SC_METHOD(thread_char5_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char5 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char5_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char6_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char6_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( char6 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_char6_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color1_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color1_out_full_n );

    SC_METHOD(thread_color1_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color1_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color2_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color2_out_full_n );

    SC_METHOD(thread_color2_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color2 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color2_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color3_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color3_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color3 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_color3_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_xleft_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );

    SC_METHOD(thread_xleft_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_s );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_xleft_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_xright_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xright_out_full_n );

    SC_METHOD(thread_xright_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xright_s );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_xright_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ydown_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ydown_out_full_n );

    SC_METHOD(thread_ydown_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ydown_s );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ydown_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ytop_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ytop_out_full_n );

    SC_METHOD(thread_ytop_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ytop_s );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ytop_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );
    sensitive << ( xright_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( ydown_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( char1_out_full_n );
    sensitive << ( char2_out_full_n );
    sensitive << ( char3_out_full_n );
    sensitive << ( char4_out_full_n );
    sensitive << ( char5_out_full_n );
    sensitive << ( char6_out_full_n );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hls_rect_entry3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, xleft_s, "(port)xleft_s");
    sc_trace(mVcdFile, xright_s, "(port)xright_s");
    sc_trace(mVcdFile, ytop_s, "(port)ytop_s");
    sc_trace(mVcdFile, ydown_s, "(port)ydown_s");
    sc_trace(mVcdFile, color1, "(port)color1");
    sc_trace(mVcdFile, color2, "(port)color2");
    sc_trace(mVcdFile, color3, "(port)color3");
    sc_trace(mVcdFile, char1, "(port)char1");
    sc_trace(mVcdFile, char2, "(port)char2");
    sc_trace(mVcdFile, char3, "(port)char3");
    sc_trace(mVcdFile, char4, "(port)char4");
    sc_trace(mVcdFile, char5, "(port)char5");
    sc_trace(mVcdFile, char6, "(port)char6");
    sc_trace(mVcdFile, xleft_out_din, "(port)xleft_out_din");
    sc_trace(mVcdFile, xleft_out_full_n, "(port)xleft_out_full_n");
    sc_trace(mVcdFile, xleft_out_write, "(port)xleft_out_write");
    sc_trace(mVcdFile, xright_out_din, "(port)xright_out_din");
    sc_trace(mVcdFile, xright_out_full_n, "(port)xright_out_full_n");
    sc_trace(mVcdFile, xright_out_write, "(port)xright_out_write");
    sc_trace(mVcdFile, ytop_out_din, "(port)ytop_out_din");
    sc_trace(mVcdFile, ytop_out_full_n, "(port)ytop_out_full_n");
    sc_trace(mVcdFile, ytop_out_write, "(port)ytop_out_write");
    sc_trace(mVcdFile, ydown_out_din, "(port)ydown_out_din");
    sc_trace(mVcdFile, ydown_out_full_n, "(port)ydown_out_full_n");
    sc_trace(mVcdFile, ydown_out_write, "(port)ydown_out_write");
    sc_trace(mVcdFile, color1_out_din, "(port)color1_out_din");
    sc_trace(mVcdFile, color1_out_full_n, "(port)color1_out_full_n");
    sc_trace(mVcdFile, color1_out_write, "(port)color1_out_write");
    sc_trace(mVcdFile, color2_out_din, "(port)color2_out_din");
    sc_trace(mVcdFile, color2_out_full_n, "(port)color2_out_full_n");
    sc_trace(mVcdFile, color2_out_write, "(port)color2_out_write");
    sc_trace(mVcdFile, color3_out_din, "(port)color3_out_din");
    sc_trace(mVcdFile, color3_out_full_n, "(port)color3_out_full_n");
    sc_trace(mVcdFile, color3_out_write, "(port)color3_out_write");
    sc_trace(mVcdFile, char1_out_din, "(port)char1_out_din");
    sc_trace(mVcdFile, char1_out_full_n, "(port)char1_out_full_n");
    sc_trace(mVcdFile, char1_out_write, "(port)char1_out_write");
    sc_trace(mVcdFile, char2_out_din, "(port)char2_out_din");
    sc_trace(mVcdFile, char2_out_full_n, "(port)char2_out_full_n");
    sc_trace(mVcdFile, char2_out_write, "(port)char2_out_write");
    sc_trace(mVcdFile, char3_out_din, "(port)char3_out_din");
    sc_trace(mVcdFile, char3_out_full_n, "(port)char3_out_full_n");
    sc_trace(mVcdFile, char3_out_write, "(port)char3_out_write");
    sc_trace(mVcdFile, char4_out_din, "(port)char4_out_din");
    sc_trace(mVcdFile, char4_out_full_n, "(port)char4_out_full_n");
    sc_trace(mVcdFile, char4_out_write, "(port)char4_out_write");
    sc_trace(mVcdFile, char5_out_din, "(port)char5_out_din");
    sc_trace(mVcdFile, char5_out_full_n, "(port)char5_out_full_n");
    sc_trace(mVcdFile, char5_out_write, "(port)char5_out_write");
    sc_trace(mVcdFile, char6_out_din, "(port)char6_out_din");
    sc_trace(mVcdFile, char6_out_full_n, "(port)char6_out_full_n");
    sc_trace(mVcdFile, char6_out_write, "(port)char6_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, xleft_out_blk_n, "xleft_out_blk_n");
    sc_trace(mVcdFile, xright_out_blk_n, "xright_out_blk_n");
    sc_trace(mVcdFile, ytop_out_blk_n, "ytop_out_blk_n");
    sc_trace(mVcdFile, ydown_out_blk_n, "ydown_out_blk_n");
    sc_trace(mVcdFile, color1_out_blk_n, "color1_out_blk_n");
    sc_trace(mVcdFile, color2_out_blk_n, "color2_out_blk_n");
    sc_trace(mVcdFile, color3_out_blk_n, "color3_out_blk_n");
    sc_trace(mVcdFile, char1_out_blk_n, "char1_out_blk_n");
    sc_trace(mVcdFile, char2_out_blk_n, "char2_out_blk_n");
    sc_trace(mVcdFile, char3_out_blk_n, "char3_out_blk_n");
    sc_trace(mVcdFile, char4_out_blk_n, "char4_out_blk_n");
    sc_trace(mVcdFile, char5_out_blk_n, "char5_out_blk_n");
    sc_trace(mVcdFile, char6_out_blk_n, "char6_out_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

hls_rect_entry3::~hls_rect_entry3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void hls_rect_entry3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
}

void hls_rect_entry3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hls_rect_entry3::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read()));
}

void hls_rect_entry3::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void hls_rect_entry3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void hls_rect_entry3::thread_char1_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char1_out_blk_n = char1_out_full_n.read();
    } else {
        char1_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char1_out_din() {
    char1_out_din = char1.read();
}

void hls_rect_entry3::thread_char1_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char1_out_write = ap_const_logic_1;
    } else {
        char1_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_char2_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char2_out_blk_n = char2_out_full_n.read();
    } else {
        char2_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char2_out_din() {
    char2_out_din = char2.read();
}

void hls_rect_entry3::thread_char2_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char2_out_write = ap_const_logic_1;
    } else {
        char2_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_char3_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char3_out_blk_n = char3_out_full_n.read();
    } else {
        char3_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char3_out_din() {
    char3_out_din = char3.read();
}

void hls_rect_entry3::thread_char3_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char3_out_write = ap_const_logic_1;
    } else {
        char3_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_char4_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char4_out_blk_n = char4_out_full_n.read();
    } else {
        char4_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char4_out_din() {
    char4_out_din = char4.read();
}

void hls_rect_entry3::thread_char4_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char4_out_write = ap_const_logic_1;
    } else {
        char4_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_char5_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char5_out_blk_n = char5_out_full_n.read();
    } else {
        char5_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char5_out_din() {
    char5_out_din = char5.read();
}

void hls_rect_entry3::thread_char5_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char5_out_write = ap_const_logic_1;
    } else {
        char5_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_char6_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        char6_out_blk_n = char6_out_full_n.read();
    } else {
        char6_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_char6_out_din() {
    char6_out_din = char6.read();
}

void hls_rect_entry3::thread_char6_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        char6_out_write = ap_const_logic_1;
    } else {
        char6_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_color1_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color1_out_blk_n = color1_out_full_n.read();
    } else {
        color1_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_color1_out_din() {
    color1_out_din = color1.read();
}

void hls_rect_entry3::thread_color1_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        color1_out_write = ap_const_logic_1;
    } else {
        color1_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_color2_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color2_out_blk_n = color2_out_full_n.read();
    } else {
        color2_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_color2_out_din() {
    color2_out_din = color2.read();
}

void hls_rect_entry3::thread_color2_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        color2_out_write = ap_const_logic_1;
    } else {
        color2_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_color3_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color3_out_blk_n = color3_out_full_n.read();
    } else {
        color3_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_color3_out_din() {
    color3_out_din = color3.read();
}

void hls_rect_entry3::thread_color3_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        color3_out_write = ap_const_logic_1;
    } else {
        color3_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void hls_rect_entry3::thread_start_out() {
    start_out = real_start.read();
}

void hls_rect_entry3::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_xleft_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xleft_out_blk_n = xleft_out_full_n.read();
    } else {
        xleft_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_xleft_out_din() {
    xleft_out_din = xleft_s.read();
}

void hls_rect_entry3::thread_xleft_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        xleft_out_write = ap_const_logic_1;
    } else {
        xleft_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_xright_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xright_out_blk_n = xright_out_full_n.read();
    } else {
        xright_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_xright_out_din() {
    xright_out_din = xright_s.read();
}

void hls_rect_entry3::thread_xright_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        xright_out_write = ap_const_logic_1;
    } else {
        xright_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_ydown_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ydown_out_blk_n = ydown_out_full_n.read();
    } else {
        ydown_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_ydown_out_din() {
    ydown_out_din = ydown_s.read();
}

void hls_rect_entry3::thread_ydown_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        ydown_out_write = ap_const_logic_1;
    } else {
        ydown_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_ytop_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ytop_out_blk_n = ytop_out_full_n.read();
    } else {
        ytop_out_blk_n = ap_const_logic_1;
    }
}

void hls_rect_entry3::thread_ytop_out_din() {
    ytop_out_din = ytop_s.read();
}

void hls_rect_entry3::thread_ytop_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char3_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char4_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char5_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, char6_out_full_n.read())))) {
        ytop_out_write = ap_const_logic_1;
    } else {
        ytop_out_write = ap_const_logic_0;
    }
}

void hls_rect_entry3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

