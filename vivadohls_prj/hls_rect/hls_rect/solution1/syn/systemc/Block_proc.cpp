// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Block_proc::ap_ST_fsm_state1 = "1";
const sc_lv<2> Block_proc::ap_ST_fsm_state2 = "10";
const sc_lv<32> Block_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Block_proc::ap_const_lv32_1 = "1";
const sc_lv<16> Block_proc::ap_const_lv16_20 = "100000";
const sc_lv<16> Block_proc::ap_const_lv16_40 = "1000000";
const sc_lv<16> Block_proc::ap_const_lv16_60 = "1100000";
const sc_lv<16> Block_proc::ap_const_lv16_80 = "10000000";
const sc_lv<16> Block_proc::ap_const_lv16_A0 = "10100000";
const bool Block_proc::ap_const_boolean_1 = true;

Block_proc::Block_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( xleft_s_empty_n );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch2x_out_out_blk_n);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch2x_out_out_din);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xleft_read_reg_179 );

    SC_METHOD(thread_ch2x_out_out_write);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch3x_out_out_blk_n);
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch3x_out_out_din);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xleft_read_reg_179 );

    SC_METHOD(thread_ch3x_out_out_write);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch4x_out_out_blk_n);
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch4x_out_out_din);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xleft_read_reg_179 );

    SC_METHOD(thread_ch4x_out_out_write);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch5x_out_out_blk_n);
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch5x_out_out_din);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xleft_read_reg_179 );

    SC_METHOD(thread_ch5x_out_out_write);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch6x_out_out_blk_n);
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ch6x_out_out_din);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xleft_read_reg_179 );

    SC_METHOD(thread_ch6x_out_out_write);
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_xleft_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_s_empty_n );

    SC_METHOD(thread_xleft_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_s_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_s_empty_n );
    sensitive << ( ch2x_out_out_full_n );
    sensitive << ( ch3x_out_out_full_n );
    sensitive << ( ch4x_out_out_full_n );
    sensitive << ( ch5x_out_out_full_n );
    sensitive << ( ch6x_out_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, xleft_s_dout, "(port)xleft_s_dout");
    sc_trace(mVcdFile, xleft_s_empty_n, "(port)xleft_s_empty_n");
    sc_trace(mVcdFile, xleft_s_read, "(port)xleft_s_read");
    sc_trace(mVcdFile, ch2x_out_out_din, "(port)ch2x_out_out_din");
    sc_trace(mVcdFile, ch2x_out_out_full_n, "(port)ch2x_out_out_full_n");
    sc_trace(mVcdFile, ch2x_out_out_write, "(port)ch2x_out_out_write");
    sc_trace(mVcdFile, ch3x_out_out_din, "(port)ch3x_out_out_din");
    sc_trace(mVcdFile, ch3x_out_out_full_n, "(port)ch3x_out_out_full_n");
    sc_trace(mVcdFile, ch3x_out_out_write, "(port)ch3x_out_out_write");
    sc_trace(mVcdFile, ch4x_out_out_din, "(port)ch4x_out_out_din");
    sc_trace(mVcdFile, ch4x_out_out_full_n, "(port)ch4x_out_out_full_n");
    sc_trace(mVcdFile, ch4x_out_out_write, "(port)ch4x_out_out_write");
    sc_trace(mVcdFile, ch5x_out_out_din, "(port)ch5x_out_out_din");
    sc_trace(mVcdFile, ch5x_out_out_full_n, "(port)ch5x_out_out_full_n");
    sc_trace(mVcdFile, ch5x_out_out_write, "(port)ch5x_out_out_write");
    sc_trace(mVcdFile, ch6x_out_out_din, "(port)ch6x_out_out_din");
    sc_trace(mVcdFile, ch6x_out_out_full_n, "(port)ch6x_out_out_full_n");
    sc_trace(mVcdFile, ch6x_out_out_write, "(port)ch6x_out_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, xleft_s_blk_n, "xleft_s_blk_n");
    sc_trace(mVcdFile, ch2x_out_out_blk_n, "ch2x_out_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ch3x_out_out_blk_n, "ch3x_out_out_blk_n");
    sc_trace(mVcdFile, ch4x_out_out_blk_n, "ch4x_out_out_blk_n");
    sc_trace(mVcdFile, ch5x_out_out_blk_n, "ch5x_out_out_blk_n");
    sc_trace(mVcdFile, ch6x_out_out_blk_n, "ch6x_out_out_blk_n");
    sc_trace(mVcdFile, xleft_read_reg_179, "xleft_read_reg_179");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_proc::~Block_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_s_empty_n.read())))) {
        xleft_read_reg_179 = xleft_s_dout.read();
    }
}

void Block_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_s_empty_n.read()));
}

void Block_proc::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read()));
}

void Block_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc::thread_ch2x_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ch2x_out_out_blk_n = ch2x_out_out_full_n.read();
    } else {
        ch2x_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_ch2x_out_out_din() {
    ch2x_out_out_din = (!xleft_read_reg_179.read().is_01() || !ap_const_lv16_20.is_01())? sc_lv<16>(): (sc_biguint<16>(xleft_read_reg_179.read()) + sc_biguint<16>(ap_const_lv16_20));
}

void Block_proc::thread_ch2x_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ch2x_out_out_write = ap_const_logic_1;
    } else {
        ch2x_out_out_write = ap_const_logic_0;
    }
}

void Block_proc::thread_ch3x_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ch3x_out_out_blk_n = ch3x_out_out_full_n.read();
    } else {
        ch3x_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_ch3x_out_out_din() {
    ch3x_out_out_din = (!xleft_read_reg_179.read().is_01() || !ap_const_lv16_40.is_01())? sc_lv<16>(): (sc_biguint<16>(xleft_read_reg_179.read()) + sc_biguint<16>(ap_const_lv16_40));
}

void Block_proc::thread_ch3x_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ch3x_out_out_write = ap_const_logic_1;
    } else {
        ch3x_out_out_write = ap_const_logic_0;
    }
}

void Block_proc::thread_ch4x_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ch4x_out_out_blk_n = ch4x_out_out_full_n.read();
    } else {
        ch4x_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_ch4x_out_out_din() {
    ch4x_out_out_din = (!xleft_read_reg_179.read().is_01() || !ap_const_lv16_60.is_01())? sc_lv<16>(): (sc_biguint<16>(xleft_read_reg_179.read()) + sc_biguint<16>(ap_const_lv16_60));
}

void Block_proc::thread_ch4x_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ch4x_out_out_write = ap_const_logic_1;
    } else {
        ch4x_out_out_write = ap_const_logic_0;
    }
}

void Block_proc::thread_ch5x_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ch5x_out_out_blk_n = ch5x_out_out_full_n.read();
    } else {
        ch5x_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_ch5x_out_out_din() {
    ch5x_out_out_din = (!xleft_read_reg_179.read().is_01() || !ap_const_lv16_80.is_01())? sc_lv<16>(): (sc_biguint<16>(xleft_read_reg_179.read()) + sc_biguint<16>(ap_const_lv16_80));
}

void Block_proc::thread_ch5x_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ch5x_out_out_write = ap_const_logic_1;
    } else {
        ch5x_out_out_write = ap_const_logic_0;
    }
}

void Block_proc::thread_ch6x_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ch6x_out_out_blk_n = ch6x_out_out_full_n.read();
    } else {
        ch6x_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_ch6x_out_out_din() {
    ch6x_out_out_din = (!xleft_read_reg_179.read().is_01() || !ap_const_lv16_A0.is_01())? sc_lv<16>(): (sc_biguint<16>(xleft_read_reg_179.read()) + sc_biguint<16>(ap_const_lv16_A0));
}

void Block_proc::thread_ch6x_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
        ch6x_out_out_write = ap_const_logic_1;
    } else {
        ch6x_out_out_write = ap_const_logic_0;
    }
}

void Block_proc::thread_xleft_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xleft_s_blk_n = xleft_s_empty_n.read();
    } else {
        xleft_s_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_xleft_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_s_empty_n.read())))) {
        xleft_s_read = ap_const_logic_1;
    } else {
        xleft_s_read = ap_const_logic_0;
    }
}

void Block_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_s_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ch2x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch3x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch4x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch5x_out_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ch6x_out_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

