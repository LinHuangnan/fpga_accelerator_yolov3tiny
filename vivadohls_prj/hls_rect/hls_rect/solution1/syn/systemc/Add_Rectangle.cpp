// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Add_Rectangle.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Add_Rectangle::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Add_Rectangle::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Add_Rectangle::ap_ST_fsm_state1 = "1";
const sc_lv<4> Add_Rectangle::ap_ST_fsm_state2 = "10";
const sc_lv<4> Add_Rectangle::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Add_Rectangle::ap_ST_fsm_state6 = "1000";
const sc_lv<32> Add_Rectangle::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Add_Rectangle::ap_const_boolean_1 = true;
const sc_lv<32> Add_Rectangle::ap_const_lv32_2 = "10";
const bool Add_Rectangle::ap_const_boolean_0 = false;
const sc_lv<1> Add_Rectangle::ap_const_lv1_0 = "0";
const sc_lv<32> Add_Rectangle::ap_const_lv32_1 = "1";
const sc_lv<1> Add_Rectangle::ap_const_lv1_1 = "1";
const sc_lv<10> Add_Rectangle::ap_const_lv10_0 = "0000000000";
const sc_lv<32> Add_Rectangle::ap_const_lv32_3 = "11";
const sc_lv<11> Add_Rectangle::ap_const_lv11_0 = "00000000000";
const sc_lv<17> Add_Rectangle::ap_const_lv17_4 = "100";
const sc_lv<10> Add_Rectangle::ap_const_lv10_2D0 = "1011010000";
const sc_lv<10> Add_Rectangle::ap_const_lv10_1 = "1";
const sc_lv<11> Add_Rectangle::ap_const_lv11_500 = "10100000000";
const sc_lv<11> Add_Rectangle::ap_const_lv11_1 = "1";

Add_Rectangle::Add_Rectangle(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln74_1_fu_494_p2);
    sensitive << ( zext_ln74_1_fu_490_p1 );

    SC_METHOD(thread_add_ln74_2_fu_504_p2);
    sensitive << ( zext_ln74_2_fu_500_p1 );

    SC_METHOD(thread_add_ln74_3_fu_514_p2);
    sensitive << ( zext_ln74_3_fu_510_p1 );

    SC_METHOD(thread_add_ln74_fu_484_p2);
    sensitive << ( zext_ln74_fu_480_p1 );

    SC_METHOD(thread_and_ln74_1_fu_658_p2);
    sensitive << ( or_ln74_reg_784 );
    sensitive << ( or_ln74_4_fu_621_p2 );

    SC_METHOD(thread_and_ln74_2_fu_663_p2);
    sensitive << ( xor_ln74_reg_794 );
    sensitive << ( or_ln74_5_fu_636_p2 );

    SC_METHOD(thread_and_ln74_3_fu_668_p2);
    sensitive << ( or_ln74_4_fu_621_p2 );
    sensitive << ( or_ln74_6_fu_652_p2 );

    SC_METHOD(thread_and_ln74_4_fu_674_p2);
    sensitive << ( and_ln74_3_fu_668_p2 );
    sensitive << ( and_ln74_2_fu_663_p2 );

    SC_METHOD(thread_and_ln74_fu_578_p2);
    sensitive << ( or_ln74_1_fu_566_p2 );
    sensitive << ( or_ln74_2_fu_572_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( src_data_stream_3_V_empty_n );
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( dst_data_stream_3_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( src_data_stream_3_V_empty_n );
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( dst_data_stream_3_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( src_data_stream_3_V_empty_n );
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( dst_data_stream_3_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( src_data_stream_3_V_empty_n );
    sensitive << ( icmp_ln70_reg_799 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( dst_data_stream_3_V_full_n );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln70_fu_594_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_color1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color1_empty_n );

    SC_METHOD(thread_color1_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color1_out_full_n );

    SC_METHOD(thread_color1_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_dout );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color1_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color2_empty_n );

    SC_METHOD(thread_color2_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color2_out_full_n );

    SC_METHOD(thread_color2_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_dout );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color2_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color2_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color3_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color3_empty_n );

    SC_METHOD(thread_color3_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color3_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_dout );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color3_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_color3_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_dst_data_stream_0_V_blk_n);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_dst_data_stream_0_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( pix1_val_0_reg_827 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_data_stream_0_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_data_stream_1_V_blk_n);
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_dst_data_stream_1_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( pix1_val_1_reg_832 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_data_stream_1_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_data_stream_2_V_blk_n);
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_dst_data_stream_2_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( pix1_val_2_reg_837 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_data_stream_2_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_data_stream_3_V_blk_n);
    sensitive << ( dst_data_stream_3_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );

    SC_METHOD(thread_dst_data_stream_3_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( tmp_9_reg_822 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_dst_data_stream_3_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln70_reg_799_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_fu_530_p2);
    sensitive << ( i_0_i_reg_458 );

    SC_METHOD(thread_icmp_ln68_fu_524_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_reg_458 );

    SC_METHOD(thread_icmp_ln70_fu_594_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_0_i_reg_469 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln74_1_fu_545_p2);
    sensitive << ( add_ln74_reg_755 );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln74_4_fu_541_p1 );

    SC_METHOD(thread_icmp_ln74_2_fu_550_p2);
    sensitive << ( ydown_read_reg_735 );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln68_fu_520_p1 );

    SC_METHOD(thread_icmp_ln74_3_fu_555_p2);
    sensitive << ( add_ln74_3_reg_770 );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln74_4_fu_541_p1 );

    SC_METHOD(thread_icmp_ln74_4_fu_606_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xleft_read_reg_719 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln70_fu_590_p1 );

    SC_METHOD(thread_icmp_ln74_5_fu_611_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xright_read_reg_724 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln70_fu_590_p1 );

    SC_METHOD(thread_icmp_ln74_6_fu_631_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln74_2_reg_765 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln74_5_fu_627_p1 );

    SC_METHOD(thread_icmp_ln74_7_fu_642_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xright_read_reg_724 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln70_fu_590_p1 );

    SC_METHOD(thread_icmp_ln74_8_fu_647_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln74_1_reg_760 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln74_5_fu_627_p1 );

    SC_METHOD(thread_icmp_ln74_fu_536_p2);
    sensitive << ( ytop_read_reg_730 );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln68_fu_520_p1 );

    SC_METHOD(thread_j_fu_600_p2);
    sensitive << ( j_0_i_reg_469 );

    SC_METHOD(thread_or_ln74_1_fu_566_p2);
    sensitive << ( icmp_ln74_fu_536_p2 );
    sensitive << ( icmp_ln74_3_fu_555_p2 );

    SC_METHOD(thread_or_ln74_2_fu_572_p2);
    sensitive << ( icmp_ln74_1_fu_545_p2 );
    sensitive << ( icmp_ln74_2_fu_550_p2 );

    SC_METHOD(thread_or_ln74_3_fu_616_p2);
    sensitive << ( and_ln74_reg_789 );
    sensitive << ( icmp_ln74_5_fu_611_p2 );

    SC_METHOD(thread_or_ln74_4_fu_621_p2);
    sensitive << ( or_ln74_3_fu_616_p2 );
    sensitive << ( icmp_ln74_4_fu_606_p2 );

    SC_METHOD(thread_or_ln74_5_fu_636_p2);
    sensitive << ( icmp_ln74_4_fu_606_p2 );
    sensitive << ( icmp_ln74_6_fu_631_p2 );

    SC_METHOD(thread_or_ln74_6_fu_652_p2);
    sensitive << ( icmp_ln74_7_fu_642_p2 );
    sensitive << ( icmp_ln74_8_fu_647_p2 );

    SC_METHOD(thread_or_ln74_fu_560_p2);
    sensitive << ( icmp_ln74_fu_536_p2 );
    sensitive << ( icmp_ln74_1_fu_545_p2 );

    SC_METHOD(thread_pix1_val_0_3_fu_680_p3);
    sensitive << ( src_data_stream_0_V_dout );
    sensitive << ( pix1_val_0_2_reg_740 );
    sensitive << ( and_ln74_1_reg_808 );

    SC_METHOD(thread_pix1_val_0_fu_686_p3);
    sensitive << ( src_data_stream_0_V_dout );
    sensitive << ( and_ln74_4_reg_815 );
    sensitive << ( pix1_val_0_3_fu_680_p3 );

    SC_METHOD(thread_pix1_val_1_3_fu_693_p3);
    sensitive << ( src_data_stream_1_V_dout );
    sensitive << ( pix1_val_1_2_reg_745 );
    sensitive << ( and_ln74_1_reg_808 );

    SC_METHOD(thread_pix1_val_1_fu_699_p3);
    sensitive << ( src_data_stream_1_V_dout );
    sensitive << ( and_ln74_4_reg_815 );
    sensitive << ( pix1_val_1_3_fu_693_p3 );

    SC_METHOD(thread_pix1_val_2_3_fu_706_p3);
    sensitive << ( src_data_stream_2_V_dout );
    sensitive << ( pix1_val_2_2_reg_750 );
    sensitive << ( and_ln74_1_reg_808 );

    SC_METHOD(thread_pix1_val_2_fu_712_p3);
    sensitive << ( src_data_stream_2_V_dout );
    sensitive << ( and_ln74_4_reg_815 );
    sensitive << ( pix1_val_2_3_fu_706_p3 );

    SC_METHOD(thread_src_data_stream_0_V_blk_n);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln70_reg_799 );

    SC_METHOD(thread_src_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_data_stream_1_V_blk_n);
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln70_reg_799 );

    SC_METHOD(thread_src_data_stream_1_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_data_stream_2_V_blk_n);
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln70_reg_799 );

    SC_METHOD(thread_src_data_stream_2_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_data_stream_3_V_blk_n);
    sensitive << ( src_data_stream_3_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln70_reg_799 );

    SC_METHOD(thread_src_data_stream_3_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln70_reg_799 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xleft_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );

    SC_METHOD(thread_xleft_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_out_full_n );

    SC_METHOD(thread_xleft_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_dout );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_xleft_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_xleft_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_xor_ln74_fu_584_p2);
    sensitive << ( or_ln74_fu_560_p2 );

    SC_METHOD(thread_xright_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xright_empty_n );

    SC_METHOD(thread_xright_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_ydown_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_ydown_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_ytop_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ytop_empty_n );

    SC_METHOD(thread_ytop_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ytop_out_full_n );

    SC_METHOD(thread_ytop_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_dout );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_ytop_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_ytop_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );

    SC_METHOD(thread_zext_ln68_fu_520_p1);
    sensitive << ( i_0_i_reg_458 );

    SC_METHOD(thread_zext_ln70_fu_590_p1);
    sensitive << ( j_0_i_reg_469 );

    SC_METHOD(thread_zext_ln74_1_fu_490_p1);
    sensitive << ( xright_dout );

    SC_METHOD(thread_zext_ln74_2_fu_500_p1);
    sensitive << ( xleft_dout );

    SC_METHOD(thread_zext_ln74_3_fu_510_p1);
    sensitive << ( ytop_dout );

    SC_METHOD(thread_zext_ln74_4_fu_541_p1);
    sensitive << ( i_0_i_reg_458 );

    SC_METHOD(thread_zext_ln74_5_fu_627_p1);
    sensitive << ( j_0_i_reg_469 );

    SC_METHOD(thread_zext_ln74_fu_480_p1);
    sensitive << ( ydown_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( color1_empty_n );
    sensitive << ( color2_empty_n );
    sensitive << ( color3_empty_n );
    sensitive << ( xleft_out_full_n );
    sensitive << ( ytop_out_full_n );
    sensitive << ( color1_out_full_n );
    sensitive << ( color2_out_full_n );
    sensitive << ( color3_out_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_fu_524_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln70_fu_594_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Add_Rectangle_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, src_data_stream_0_V_dout, "(port)src_data_stream_0_V_dout");
    sc_trace(mVcdFile, src_data_stream_0_V_empty_n, "(port)src_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_0_V_read, "(port)src_data_stream_0_V_read");
    sc_trace(mVcdFile, src_data_stream_1_V_dout, "(port)src_data_stream_1_V_dout");
    sc_trace(mVcdFile, src_data_stream_1_V_empty_n, "(port)src_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_1_V_read, "(port)src_data_stream_1_V_read");
    sc_trace(mVcdFile, src_data_stream_2_V_dout, "(port)src_data_stream_2_V_dout");
    sc_trace(mVcdFile, src_data_stream_2_V_empty_n, "(port)src_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_2_V_read, "(port)src_data_stream_2_V_read");
    sc_trace(mVcdFile, src_data_stream_3_V_dout, "(port)src_data_stream_3_V_dout");
    sc_trace(mVcdFile, src_data_stream_3_V_empty_n, "(port)src_data_stream_3_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_3_V_read, "(port)src_data_stream_3_V_read");
    sc_trace(mVcdFile, dst_data_stream_0_V_din, "(port)dst_data_stream_0_V_din");
    sc_trace(mVcdFile, dst_data_stream_0_V_full_n, "(port)dst_data_stream_0_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_write, "(port)dst_data_stream_0_V_write");
    sc_trace(mVcdFile, dst_data_stream_1_V_din, "(port)dst_data_stream_1_V_din");
    sc_trace(mVcdFile, dst_data_stream_1_V_full_n, "(port)dst_data_stream_1_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_1_V_write, "(port)dst_data_stream_1_V_write");
    sc_trace(mVcdFile, dst_data_stream_2_V_din, "(port)dst_data_stream_2_V_din");
    sc_trace(mVcdFile, dst_data_stream_2_V_full_n, "(port)dst_data_stream_2_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_2_V_write, "(port)dst_data_stream_2_V_write");
    sc_trace(mVcdFile, dst_data_stream_3_V_din, "(port)dst_data_stream_3_V_din");
    sc_trace(mVcdFile, dst_data_stream_3_V_full_n, "(port)dst_data_stream_3_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_3_V_write, "(port)dst_data_stream_3_V_write");
    sc_trace(mVcdFile, xleft_dout, "(port)xleft_dout");
    sc_trace(mVcdFile, xleft_empty_n, "(port)xleft_empty_n");
    sc_trace(mVcdFile, xleft_read, "(port)xleft_read");
    sc_trace(mVcdFile, xright_dout, "(port)xright_dout");
    sc_trace(mVcdFile, xright_empty_n, "(port)xright_empty_n");
    sc_trace(mVcdFile, xright_read, "(port)xright_read");
    sc_trace(mVcdFile, ytop_dout, "(port)ytop_dout");
    sc_trace(mVcdFile, ytop_empty_n, "(port)ytop_empty_n");
    sc_trace(mVcdFile, ytop_read, "(port)ytop_read");
    sc_trace(mVcdFile, ydown_dout, "(port)ydown_dout");
    sc_trace(mVcdFile, ydown_empty_n, "(port)ydown_empty_n");
    sc_trace(mVcdFile, ydown_read, "(port)ydown_read");
    sc_trace(mVcdFile, color1_dout, "(port)color1_dout");
    sc_trace(mVcdFile, color1_empty_n, "(port)color1_empty_n");
    sc_trace(mVcdFile, color1_read, "(port)color1_read");
    sc_trace(mVcdFile, color2_dout, "(port)color2_dout");
    sc_trace(mVcdFile, color2_empty_n, "(port)color2_empty_n");
    sc_trace(mVcdFile, color2_read, "(port)color2_read");
    sc_trace(mVcdFile, color3_dout, "(port)color3_dout");
    sc_trace(mVcdFile, color3_empty_n, "(port)color3_empty_n");
    sc_trace(mVcdFile, color3_read, "(port)color3_read");
    sc_trace(mVcdFile, xleft_out_din, "(port)xleft_out_din");
    sc_trace(mVcdFile, xleft_out_full_n, "(port)xleft_out_full_n");
    sc_trace(mVcdFile, xleft_out_write, "(port)xleft_out_write");
    sc_trace(mVcdFile, ytop_out_din, "(port)ytop_out_din");
    sc_trace(mVcdFile, ytop_out_full_n, "(port)ytop_out_full_n");
    sc_trace(mVcdFile, ytop_out_write, "(port)ytop_out_write");
    sc_trace(mVcdFile, color1_out_din, "(port)color1_out_din");
    sc_trace(mVcdFile, color1_out_full_n, "(port)color1_out_full_n");
    sc_trace(mVcdFile, color1_out_write, "(port)color1_out_write");
    sc_trace(mVcdFile, color2_out_din, "(port)color2_out_din");
    sc_trace(mVcdFile, color2_out_full_n, "(port)color2_out_full_n");
    sc_trace(mVcdFile, color2_out_write, "(port)color2_out_write");
    sc_trace(mVcdFile, color3_out_din, "(port)color3_out_din");
    sc_trace(mVcdFile, color3_out_full_n, "(port)color3_out_full_n");
    sc_trace(mVcdFile, color3_out_write, "(port)color3_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, src_data_stream_0_V_blk_n, "src_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln70_reg_799, "icmp_ln70_reg_799");
    sc_trace(mVcdFile, src_data_stream_1_V_blk_n, "src_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, src_data_stream_2_V_blk_n, "src_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, src_data_stream_3_V_blk_n, "src_data_stream_3_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_blk_n, "dst_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln70_reg_799_pp0_iter1_reg, "icmp_ln70_reg_799_pp0_iter1_reg");
    sc_trace(mVcdFile, dst_data_stream_1_V_blk_n, "dst_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_2_V_blk_n, "dst_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_3_V_blk_n, "dst_data_stream_3_V_blk_n");
    sc_trace(mVcdFile, xleft_blk_n, "xleft_blk_n");
    sc_trace(mVcdFile, xright_blk_n, "xright_blk_n");
    sc_trace(mVcdFile, ytop_blk_n, "ytop_blk_n");
    sc_trace(mVcdFile, ydown_blk_n, "ydown_blk_n");
    sc_trace(mVcdFile, color1_blk_n, "color1_blk_n");
    sc_trace(mVcdFile, color2_blk_n, "color2_blk_n");
    sc_trace(mVcdFile, color3_blk_n, "color3_blk_n");
    sc_trace(mVcdFile, xleft_out_blk_n, "xleft_out_blk_n");
    sc_trace(mVcdFile, ytop_out_blk_n, "ytop_out_blk_n");
    sc_trace(mVcdFile, color1_out_blk_n, "color1_out_blk_n");
    sc_trace(mVcdFile, color2_out_blk_n, "color2_out_blk_n");
    sc_trace(mVcdFile, color3_out_blk_n, "color3_out_blk_n");
    sc_trace(mVcdFile, j_0_i_reg_469, "j_0_i_reg_469");
    sc_trace(mVcdFile, xleft_read_reg_719, "xleft_read_reg_719");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, xright_read_reg_724, "xright_read_reg_724");
    sc_trace(mVcdFile, ytop_read_reg_730, "ytop_read_reg_730");
    sc_trace(mVcdFile, ydown_read_reg_735, "ydown_read_reg_735");
    sc_trace(mVcdFile, pix1_val_0_2_reg_740, "pix1_val_0_2_reg_740");
    sc_trace(mVcdFile, pix1_val_1_2_reg_745, "pix1_val_1_2_reg_745");
    sc_trace(mVcdFile, pix1_val_2_2_reg_750, "pix1_val_2_2_reg_750");
    sc_trace(mVcdFile, add_ln74_fu_484_p2, "add_ln74_fu_484_p2");
    sc_trace(mVcdFile, add_ln74_reg_755, "add_ln74_reg_755");
    sc_trace(mVcdFile, add_ln74_1_fu_494_p2, "add_ln74_1_fu_494_p2");
    sc_trace(mVcdFile, add_ln74_1_reg_760, "add_ln74_1_reg_760");
    sc_trace(mVcdFile, add_ln74_2_fu_504_p2, "add_ln74_2_fu_504_p2");
    sc_trace(mVcdFile, add_ln74_2_reg_765, "add_ln74_2_reg_765");
    sc_trace(mVcdFile, add_ln74_3_fu_514_p2, "add_ln74_3_fu_514_p2");
    sc_trace(mVcdFile, add_ln74_3_reg_770, "add_ln74_3_reg_770");
    sc_trace(mVcdFile, icmp_ln68_fu_524_p2, "icmp_ln68_fu_524_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_530_p2, "i_fu_530_p2");
    sc_trace(mVcdFile, i_reg_779, "i_reg_779");
    sc_trace(mVcdFile, or_ln74_fu_560_p2, "or_ln74_fu_560_p2");
    sc_trace(mVcdFile, or_ln74_reg_784, "or_ln74_reg_784");
    sc_trace(mVcdFile, and_ln74_fu_578_p2, "and_ln74_fu_578_p2");
    sc_trace(mVcdFile, and_ln74_reg_789, "and_ln74_reg_789");
    sc_trace(mVcdFile, xor_ln74_fu_584_p2, "xor_ln74_fu_584_p2");
    sc_trace(mVcdFile, xor_ln74_reg_794, "xor_ln74_reg_794");
    sc_trace(mVcdFile, icmp_ln70_fu_594_p2, "icmp_ln70_fu_594_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_fu_600_p2, "j_fu_600_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, and_ln74_1_fu_658_p2, "and_ln74_1_fu_658_p2");
    sc_trace(mVcdFile, and_ln74_1_reg_808, "and_ln74_1_reg_808");
    sc_trace(mVcdFile, and_ln74_4_fu_674_p2, "and_ln74_4_fu_674_p2");
    sc_trace(mVcdFile, and_ln74_4_reg_815, "and_ln74_4_reg_815");
    sc_trace(mVcdFile, tmp_9_reg_822, "tmp_9_reg_822");
    sc_trace(mVcdFile, pix1_val_0_fu_686_p3, "pix1_val_0_fu_686_p3");
    sc_trace(mVcdFile, pix1_val_0_reg_827, "pix1_val_0_reg_827");
    sc_trace(mVcdFile, pix1_val_1_fu_699_p3, "pix1_val_1_fu_699_p3");
    sc_trace(mVcdFile, pix1_val_1_reg_832, "pix1_val_1_reg_832");
    sc_trace(mVcdFile, pix1_val_2_fu_712_p3, "pix1_val_2_fu_712_p3");
    sc_trace(mVcdFile, pix1_val_2_reg_837, "pix1_val_2_reg_837");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, i_0_i_reg_458, "i_0_i_reg_458");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln74_fu_480_p1, "zext_ln74_fu_480_p1");
    sc_trace(mVcdFile, zext_ln74_1_fu_490_p1, "zext_ln74_1_fu_490_p1");
    sc_trace(mVcdFile, zext_ln74_2_fu_500_p1, "zext_ln74_2_fu_500_p1");
    sc_trace(mVcdFile, zext_ln74_3_fu_510_p1, "zext_ln74_3_fu_510_p1");
    sc_trace(mVcdFile, zext_ln68_fu_520_p1, "zext_ln68_fu_520_p1");
    sc_trace(mVcdFile, zext_ln74_4_fu_541_p1, "zext_ln74_4_fu_541_p1");
    sc_trace(mVcdFile, icmp_ln74_fu_536_p2, "icmp_ln74_fu_536_p2");
    sc_trace(mVcdFile, icmp_ln74_1_fu_545_p2, "icmp_ln74_1_fu_545_p2");
    sc_trace(mVcdFile, icmp_ln74_3_fu_555_p2, "icmp_ln74_3_fu_555_p2");
    sc_trace(mVcdFile, icmp_ln74_2_fu_550_p2, "icmp_ln74_2_fu_550_p2");
    sc_trace(mVcdFile, or_ln74_1_fu_566_p2, "or_ln74_1_fu_566_p2");
    sc_trace(mVcdFile, or_ln74_2_fu_572_p2, "or_ln74_2_fu_572_p2");
    sc_trace(mVcdFile, zext_ln70_fu_590_p1, "zext_ln70_fu_590_p1");
    sc_trace(mVcdFile, icmp_ln74_5_fu_611_p2, "icmp_ln74_5_fu_611_p2");
    sc_trace(mVcdFile, or_ln74_3_fu_616_p2, "or_ln74_3_fu_616_p2");
    sc_trace(mVcdFile, icmp_ln74_4_fu_606_p2, "icmp_ln74_4_fu_606_p2");
    sc_trace(mVcdFile, zext_ln74_5_fu_627_p1, "zext_ln74_5_fu_627_p1");
    sc_trace(mVcdFile, icmp_ln74_6_fu_631_p2, "icmp_ln74_6_fu_631_p2");
    sc_trace(mVcdFile, icmp_ln74_7_fu_642_p2, "icmp_ln74_7_fu_642_p2");
    sc_trace(mVcdFile, icmp_ln74_8_fu_647_p2, "icmp_ln74_8_fu_647_p2");
    sc_trace(mVcdFile, or_ln74_4_fu_621_p2, "or_ln74_4_fu_621_p2");
    sc_trace(mVcdFile, or_ln74_5_fu_636_p2, "or_ln74_5_fu_636_p2");
    sc_trace(mVcdFile, or_ln74_6_fu_652_p2, "or_ln74_6_fu_652_p2");
    sc_trace(mVcdFile, and_ln74_3_fu_668_p2, "and_ln74_3_fu_668_p2");
    sc_trace(mVcdFile, and_ln74_2_fu_663_p2, "and_ln74_2_fu_663_p2");
    sc_trace(mVcdFile, pix1_val_0_3_fu_680_p3, "pix1_val_0_3_fu_680_p3");
    sc_trace(mVcdFile, pix1_val_1_3_fu_693_p3, "pix1_val_1_3_fu_693_p3");
    sc_trace(mVcdFile, pix1_val_2_3_fu_706_p3, "pix1_val_2_3_fu_706_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Add_Rectangle::~Add_Rectangle() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Add_Rectangle::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln68_fu_524_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_524_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_524_p2.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_i_reg_458 = i_reg_779.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        i_0_i_reg_458 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_fu_594_p2.read()))) {
        j_0_i_reg_469 = j_fu_600_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_524_p2.read()))) {
        j_0_i_reg_469 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        add_ln74_1_reg_760 = add_ln74_1_fu_494_p2.read();
        add_ln74_2_reg_765 = add_ln74_2_fu_504_p2.read();
        add_ln74_3_reg_770 = add_ln74_3_fu_514_p2.read();
        add_ln74_reg_755 = add_ln74_fu_484_p2.read();
        pix1_val_0_2_reg_740 = color1_dout.read();
        pix1_val_1_2_reg_745 = color2_dout.read();
        pix1_val_2_2_reg_750 = color3_dout.read();
        xleft_read_reg_719 = xleft_dout.read();
        xright_read_reg_724 = xright_dout.read();
        ydown_read_reg_735 = ydown_dout.read();
        ytop_read_reg_730 = ytop_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_fu_594_p2.read()))) {
        and_ln74_1_reg_808 = and_ln74_1_fu_658_p2.read();
        and_ln74_4_reg_815 = and_ln74_4_fu_674_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_524_p2.read()))) {
        and_ln74_reg_789 = and_ln74_fu_578_p2.read();
        or_ln74_reg_784 = or_ln74_fu_560_p2.read();
        xor_ln74_reg_794 = xor_ln74_fu_584_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_779 = i_fu_530_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln70_reg_799 = icmp_ln70_fu_594_p2.read();
        icmp_ln70_reg_799_pp0_iter1_reg = icmp_ln70_reg_799.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        pix1_val_0_reg_827 = pix1_val_0_fu_686_p3.read();
        pix1_val_1_reg_832 = pix1_val_1_fu_699_p3.read();
        pix1_val_2_reg_837 = pix1_val_2_fu_712_p3.read();
        tmp_9_reg_822 = src_data_stream_3_V_dout.read();
    }
}

void Add_Rectangle::thread_add_ln74_1_fu_494_p2() {
    add_ln74_1_fu_494_p2 = (!zext_ln74_1_fu_490_p1.read().is_01() || !ap_const_lv17_4.is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln74_1_fu_490_p1.read()) + sc_biguint<17>(ap_const_lv17_4));
}

void Add_Rectangle::thread_add_ln74_2_fu_504_p2() {
    add_ln74_2_fu_504_p2 = (!zext_ln74_2_fu_500_p1.read().is_01() || !ap_const_lv17_4.is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln74_2_fu_500_p1.read()) + sc_biguint<17>(ap_const_lv17_4));
}

void Add_Rectangle::thread_add_ln74_3_fu_514_p2() {
    add_ln74_3_fu_514_p2 = (!zext_ln74_3_fu_510_p1.read().is_01() || !ap_const_lv17_4.is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln74_3_fu_510_p1.read()) + sc_biguint<17>(ap_const_lv17_4));
}

void Add_Rectangle::thread_add_ln74_fu_484_p2() {
    add_ln74_fu_484_p2 = (!zext_ln74_fu_480_p1.read().is_01() || !ap_const_lv17_4.is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln74_fu_480_p1.read()) + sc_biguint<17>(ap_const_lv17_4));
}

void Add_Rectangle::thread_and_ln74_1_fu_658_p2() {
    and_ln74_1_fu_658_p2 = (or_ln74_4_fu_621_p2.read() & or_ln74_reg_784.read());
}

void Add_Rectangle::thread_and_ln74_2_fu_663_p2() {
    and_ln74_2_fu_663_p2 = (or_ln74_5_fu_636_p2.read() & xor_ln74_reg_794.read());
}

void Add_Rectangle::thread_and_ln74_3_fu_668_p2() {
    and_ln74_3_fu_668_p2 = (or_ln74_4_fu_621_p2.read() & or_ln74_6_fu_652_p2.read());
}

void Add_Rectangle::thread_and_ln74_4_fu_674_p2() {
    and_ln74_4_fu_674_p2 = (and_ln74_3_fu_668_p2.read() & and_ln74_2_fu_663_p2.read());
}

void Add_Rectangle::thread_and_ln74_fu_578_p2() {
    and_ln74_fu_578_p2 = (or_ln74_1_fu_566_p2.read() & or_ln74_2_fu_572_p2.read());
}

void Add_Rectangle::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Add_Rectangle::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Add_Rectangle::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Add_Rectangle::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void Add_Rectangle::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Add_Rectangle::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_3_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_3_V_full_n.read())))));
}

void Add_Rectangle::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_3_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_3_V_full_n.read())))));
}

void Add_Rectangle::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_3_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_3_V_full_n.read())))));
}

void Add_Rectangle::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read()));
}

void Add_Rectangle::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Add_Rectangle::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_3_V_empty_n.read())));
}

void Add_Rectangle::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_3_V_full_n.read())));
}

void Add_Rectangle::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln70_fu_594_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln68_fu_524_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Add_Rectangle::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Add_Rectangle::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln68_fu_524_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color1_blk_n = color1_empty_n.read();
    } else {
        color1_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color1_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color1_out_blk_n = color1_out_full_n.read();
    } else {
        color1_out_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color1_out_din() {
    color1_out_din = color1_dout.read();
}

void Add_Rectangle::thread_color1_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color1_out_write = ap_const_logic_1;
    } else {
        color1_out_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color1_read = ap_const_logic_1;
    } else {
        color1_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color2_blk_n = color2_empty_n.read();
    } else {
        color2_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color2_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color2_out_blk_n = color2_out_full_n.read();
    } else {
        color2_out_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color2_out_din() {
    color2_out_din = color2_dout.read();
}

void Add_Rectangle::thread_color2_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color2_out_write = ap_const_logic_1;
    } else {
        color2_out_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color2_read = ap_const_logic_1;
    } else {
        color2_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color3_blk_n = color3_empty_n.read();
    } else {
        color3_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color3_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        color3_out_blk_n = color3_out_full_n.read();
    } else {
        color3_out_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_color3_out_din() {
    color3_out_din = color3_dout.read();
}

void Add_Rectangle::thread_color3_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color3_out_write = ap_const_logic_1;
    } else {
        color3_out_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_color3_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        color3_read = ap_const_logic_1;
    } else {
        color3_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_dst_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()))) {
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n.read();
    } else {
        dst_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_dst_data_stream_0_V_din() {
    dst_data_stream_0_V_din = pix1_val_0_reg_827.read();
}

void Add_Rectangle::thread_dst_data_stream_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_0_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_0_V_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_dst_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()))) {
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n.read();
    } else {
        dst_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_dst_data_stream_1_V_din() {
    dst_data_stream_1_V_din = pix1_val_1_reg_832.read();
}

void Add_Rectangle::thread_dst_data_stream_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_1_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_1_V_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_dst_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()))) {
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n.read();
    } else {
        dst_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_dst_data_stream_2_V_din() {
    dst_data_stream_2_V_din = pix1_val_2_reg_837.read();
}

void Add_Rectangle::thread_dst_data_stream_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_2_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_2_V_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_dst_data_stream_3_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()))) {
        dst_data_stream_3_V_blk_n = dst_data_stream_3_V_full_n.read();
    } else {
        dst_data_stream_3_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_dst_data_stream_3_V_din() {
    dst_data_stream_3_V_din = tmp_9_reg_822.read();
}

void Add_Rectangle::thread_dst_data_stream_3_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln70_reg_799_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_data_stream_3_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_3_V_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_i_fu_530_p2() {
    i_fu_530_p2 = (!i_0_i_reg_458.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_i_reg_458.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Add_Rectangle::thread_icmp_ln68_fu_524_p2() {
    icmp_ln68_fu_524_p2 = (!i_0_i_reg_458.read().is_01() || !ap_const_lv10_2D0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_458.read() == ap_const_lv10_2D0);
}

void Add_Rectangle::thread_icmp_ln70_fu_594_p2() {
    icmp_ln70_fu_594_p2 = (!j_0_i_reg_469.read().is_01() || !ap_const_lv11_500.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_reg_469.read() == ap_const_lv11_500);
}

void Add_Rectangle::thread_icmp_ln74_1_fu_545_p2() {
    icmp_ln74_1_fu_545_p2 = (!zext_ln74_4_fu_541_p1.read().is_01() || !add_ln74_reg_755.read().is_01())? sc_lv<1>(): (sc_biguint<17>(zext_ln74_4_fu_541_p1.read()) > sc_biguint<17>(add_ln74_reg_755.read()));
}

void Add_Rectangle::thread_icmp_ln74_2_fu_550_p2() {
    icmp_ln74_2_fu_550_p2 = (!zext_ln68_fu_520_p1.read().is_01() || !ydown_read_reg_735.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln68_fu_520_p1.read()) < sc_biguint<16>(ydown_read_reg_735.read()));
}

void Add_Rectangle::thread_icmp_ln74_3_fu_555_p2() {
    icmp_ln74_3_fu_555_p2 = (!zext_ln74_4_fu_541_p1.read().is_01() || !add_ln74_3_reg_770.read().is_01())? sc_lv<1>(): (sc_biguint<17>(zext_ln74_4_fu_541_p1.read()) > sc_biguint<17>(add_ln74_3_reg_770.read()));
}

void Add_Rectangle::thread_icmp_ln74_4_fu_606_p2() {
    icmp_ln74_4_fu_606_p2 = (!zext_ln70_fu_590_p1.read().is_01() || !xleft_read_reg_719.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln70_fu_590_p1.read()) < sc_biguint<16>(xleft_read_reg_719.read()));
}

void Add_Rectangle::thread_icmp_ln74_5_fu_611_p2() {
    icmp_ln74_5_fu_611_p2 = (!zext_ln70_fu_590_p1.read().is_01() || !xright_read_reg_724.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln70_fu_590_p1.read()) > sc_biguint<16>(xright_read_reg_724.read()));
}

void Add_Rectangle::thread_icmp_ln74_6_fu_631_p2() {
    icmp_ln74_6_fu_631_p2 = (!zext_ln74_5_fu_627_p1.read().is_01() || !add_ln74_2_reg_765.read().is_01())? sc_lv<1>(): (sc_biguint<17>(zext_ln74_5_fu_627_p1.read()) > sc_biguint<17>(add_ln74_2_reg_765.read()));
}

void Add_Rectangle::thread_icmp_ln74_7_fu_642_p2() {
    icmp_ln74_7_fu_642_p2 = (!zext_ln70_fu_590_p1.read().is_01() || !xright_read_reg_724.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln70_fu_590_p1.read()) < sc_biguint<16>(xright_read_reg_724.read()));
}

void Add_Rectangle::thread_icmp_ln74_8_fu_647_p2() {
    icmp_ln74_8_fu_647_p2 = (!zext_ln74_5_fu_627_p1.read().is_01() || !add_ln74_1_reg_760.read().is_01())? sc_lv<1>(): (sc_biguint<17>(zext_ln74_5_fu_627_p1.read()) > sc_biguint<17>(add_ln74_1_reg_760.read()));
}

void Add_Rectangle::thread_icmp_ln74_fu_536_p2() {
    icmp_ln74_fu_536_p2 = (!zext_ln68_fu_520_p1.read().is_01() || !ytop_read_reg_730.read().is_01())? sc_lv<1>(): (sc_biguint<16>(zext_ln68_fu_520_p1.read()) < sc_biguint<16>(ytop_read_reg_730.read()));
}

void Add_Rectangle::thread_j_fu_600_p2() {
    j_fu_600_p2 = (!j_0_i_reg_469.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j_0_i_reg_469.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Add_Rectangle::thread_or_ln74_1_fu_566_p2() {
    or_ln74_1_fu_566_p2 = (icmp_ln74_fu_536_p2.read() | icmp_ln74_3_fu_555_p2.read());
}

void Add_Rectangle::thread_or_ln74_2_fu_572_p2() {
    or_ln74_2_fu_572_p2 = (icmp_ln74_2_fu_550_p2.read() | icmp_ln74_1_fu_545_p2.read());
}

void Add_Rectangle::thread_or_ln74_3_fu_616_p2() {
    or_ln74_3_fu_616_p2 = (icmp_ln74_5_fu_611_p2.read() | and_ln74_reg_789.read());
}

void Add_Rectangle::thread_or_ln74_4_fu_621_p2() {
    or_ln74_4_fu_621_p2 = (or_ln74_3_fu_616_p2.read() | icmp_ln74_4_fu_606_p2.read());
}

void Add_Rectangle::thread_or_ln74_5_fu_636_p2() {
    or_ln74_5_fu_636_p2 = (icmp_ln74_4_fu_606_p2.read() | icmp_ln74_6_fu_631_p2.read());
}

void Add_Rectangle::thread_or_ln74_6_fu_652_p2() {
    or_ln74_6_fu_652_p2 = (icmp_ln74_7_fu_642_p2.read() | icmp_ln74_8_fu_647_p2.read());
}

void Add_Rectangle::thread_or_ln74_fu_560_p2() {
    or_ln74_fu_560_p2 = (icmp_ln74_fu_536_p2.read() | icmp_ln74_1_fu_545_p2.read());
}

void Add_Rectangle::thread_pix1_val_0_3_fu_680_p3() {
    pix1_val_0_3_fu_680_p3 = (!and_ln74_1_reg_808.read()[0].is_01())? sc_lv<8>(): ((and_ln74_1_reg_808.read()[0].to_bool())? src_data_stream_0_V_dout.read(): pix1_val_0_2_reg_740.read());
}

void Add_Rectangle::thread_pix1_val_0_fu_686_p3() {
    pix1_val_0_fu_686_p3 = (!and_ln74_4_reg_815.read()[0].is_01())? sc_lv<8>(): ((and_ln74_4_reg_815.read()[0].to_bool())? src_data_stream_0_V_dout.read(): pix1_val_0_3_fu_680_p3.read());
}

void Add_Rectangle::thread_pix1_val_1_3_fu_693_p3() {
    pix1_val_1_3_fu_693_p3 = (!and_ln74_1_reg_808.read()[0].is_01())? sc_lv<8>(): ((and_ln74_1_reg_808.read()[0].to_bool())? src_data_stream_1_V_dout.read(): pix1_val_1_2_reg_745.read());
}

void Add_Rectangle::thread_pix1_val_1_fu_699_p3() {
    pix1_val_1_fu_699_p3 = (!and_ln74_4_reg_815.read()[0].is_01())? sc_lv<8>(): ((and_ln74_4_reg_815.read()[0].to_bool())? src_data_stream_1_V_dout.read(): pix1_val_1_3_fu_693_p3.read());
}

void Add_Rectangle::thread_pix1_val_2_3_fu_706_p3() {
    pix1_val_2_3_fu_706_p3 = (!and_ln74_1_reg_808.read()[0].is_01())? sc_lv<8>(): ((and_ln74_1_reg_808.read()[0].to_bool())? src_data_stream_2_V_dout.read(): pix1_val_2_2_reg_750.read());
}

void Add_Rectangle::thread_pix1_val_2_fu_712_p3() {
    pix1_val_2_fu_712_p3 = (!and_ln74_4_reg_815.read()[0].is_01())? sc_lv<8>(): ((and_ln74_4_reg_815.read()[0].to_bool())? src_data_stream_2_V_dout.read(): pix1_val_2_3_fu_706_p3.read());
}

void Add_Rectangle::thread_src_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0))) {
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n.read();
    } else {
        src_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_src_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_data_stream_0_V_read = ap_const_logic_1;
    } else {
        src_data_stream_0_V_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_src_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0))) {
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n.read();
    } else {
        src_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_src_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_data_stream_1_V_read = ap_const_logic_1;
    } else {
        src_data_stream_1_V_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_src_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0))) {
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n.read();
    } else {
        src_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_src_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_data_stream_2_V_read = ap_const_logic_1;
    } else {
        src_data_stream_2_V_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_src_data_stream_3_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0))) {
        src_data_stream_3_V_blk_n = src_data_stream_3_V_empty_n.read();
    } else {
        src_data_stream_3_V_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_src_data_stream_3_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln70_reg_799.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_data_stream_3_V_read = ap_const_logic_1;
    } else {
        src_data_stream_3_V_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_xleft_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xleft_blk_n = xleft_empty_n.read();
    } else {
        xleft_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_xleft_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xleft_out_blk_n = xleft_out_full_n.read();
    } else {
        xleft_out_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_xleft_out_din() {
    xleft_out_din = xleft_dout.read();
}

void Add_Rectangle::thread_xleft_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        xleft_out_write = ap_const_logic_1;
    } else {
        xleft_out_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_xleft_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        xleft_read = ap_const_logic_1;
    } else {
        xleft_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_xor_ln74_fu_584_p2() {
    xor_ln74_fu_584_p2 = (or_ln74_fu_560_p2.read() ^ ap_const_lv1_1);
}

void Add_Rectangle::thread_xright_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xright_blk_n = xright_empty_n.read();
    } else {
        xright_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_xright_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        xright_read = ap_const_logic_1;
    } else {
        xright_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ydown_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ydown_blk_n = ydown_empty_n.read();
    } else {
        ydown_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_ydown_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        ydown_read = ap_const_logic_1;
    } else {
        ydown_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ytop_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ytop_blk_n = ytop_empty_n.read();
    } else {
        ytop_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_ytop_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ytop_out_blk_n = ytop_out_full_n.read();
    } else {
        ytop_out_blk_n = ap_const_logic_1;
    }
}

void Add_Rectangle::thread_ytop_out_din() {
    ytop_out_din = ytop_dout.read();
}

void Add_Rectangle::thread_ytop_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        ytop_out_write = ap_const_logic_1;
    } else {
        ytop_out_write = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_ytop_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
        ytop_read = ap_const_logic_1;
    } else {
        ytop_read = ap_const_logic_0;
    }
}

void Add_Rectangle::thread_zext_ln68_fu_520_p1() {
    zext_ln68_fu_520_p1 = esl_zext<16,10>(i_0_i_reg_458.read());
}

void Add_Rectangle::thread_zext_ln70_fu_590_p1() {
    zext_ln70_fu_590_p1 = esl_zext<16,11>(j_0_i_reg_469.read());
}

void Add_Rectangle::thread_zext_ln74_1_fu_490_p1() {
    zext_ln74_1_fu_490_p1 = esl_zext<17,16>(xright_dout.read());
}

void Add_Rectangle::thread_zext_ln74_2_fu_500_p1() {
    zext_ln74_2_fu_500_p1 = esl_zext<17,16>(xleft_dout.read());
}

void Add_Rectangle::thread_zext_ln74_3_fu_510_p1() {
    zext_ln74_3_fu_510_p1 = esl_zext<17,16>(ytop_dout.read());
}

void Add_Rectangle::thread_zext_ln74_4_fu_541_p1() {
    zext_ln74_4_fu_541_p1 = esl_zext<17,10>(i_0_i_reg_458.read());
}

void Add_Rectangle::thread_zext_ln74_5_fu_627_p1() {
    zext_ln74_5_fu_627_p1 = esl_zext<17,11>(j_0_i_reg_469.read());
}

void Add_Rectangle::thread_zext_ln74_fu_480_p1() {
    zext_ln74_fu_480_p1 = esl_zext<17,16>(ydown_dout.read());
}

void Add_Rectangle::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color1_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color2_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, color3_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln68_fu_524_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln70_fu_594_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln70_fu_594_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

