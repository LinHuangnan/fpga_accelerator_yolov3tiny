// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Add_Rectangle (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        src_data_stream_3_V_dout,
        src_data_stream_3_V_empty_n,
        src_data_stream_3_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n,
        dst_data_stream_3_V_write,
        xleft_dout,
        xleft_empty_n,
        xleft_read,
        xright_dout,
        xright_empty_n,
        xright_read,
        ytop_dout,
        ytop_empty_n,
        ytop_read,
        ydown_dout,
        ydown_empty_n,
        ydown_read,
        color1_dout,
        color1_empty_n,
        color1_read,
        color2_dout,
        color2_empty_n,
        color2_read,
        color3_dout,
        color3_empty_n,
        color3_read,
        xleft_out_din,
        xleft_out_full_n,
        xleft_out_write,
        ytop_out_din,
        ytop_out_full_n,
        ytop_out_write,
        color1_out_din,
        color1_out_full_n,
        color1_out_write,
        color2_out_din,
        color2_out_full_n,
        color2_out_write,
        color3_out_din,
        color3_out_full_n,
        color3_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
input  [7:0] src_data_stream_3_V_dout;
input   src_data_stream_3_V_empty_n;
output   src_data_stream_3_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
output  [7:0] dst_data_stream_3_V_din;
input   dst_data_stream_3_V_full_n;
output   dst_data_stream_3_V_write;
input  [15:0] xleft_dout;
input   xleft_empty_n;
output   xleft_read;
input  [15:0] xright_dout;
input   xright_empty_n;
output   xright_read;
input  [15:0] ytop_dout;
input   ytop_empty_n;
output   ytop_read;
input  [15:0] ydown_dout;
input   ydown_empty_n;
output   ydown_read;
input  [7:0] color1_dout;
input   color1_empty_n;
output   color1_read;
input  [7:0] color2_dout;
input   color2_empty_n;
output   color2_read;
input  [7:0] color3_dout;
input   color3_empty_n;
output   color3_read;
output  [15:0] xleft_out_din;
input   xleft_out_full_n;
output   xleft_out_write;
output  [15:0] ytop_out_din;
input   ytop_out_full_n;
output   ytop_out_write;
output  [7:0] color1_out_din;
input   color1_out_full_n;
output   color1_out_write;
output  [7:0] color2_out_din;
input   color2_out_full_n;
output   color2_out_write;
output  [7:0] color3_out_din;
input   color3_out_full_n;
output   color3_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg src_data_stream_3_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg dst_data_stream_3_V_write;
reg xleft_read;
reg xright_read;
reg ytop_read;
reg ydown_read;
reg color1_read;
reg color2_read;
reg color3_read;
reg xleft_out_write;
reg ytop_out_write;
reg color1_out_write;
reg color2_out_write;
reg color3_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln70_reg_799;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    src_data_stream_3_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln70_reg_799_pp0_iter1_reg;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    dst_data_stream_3_V_blk_n;
reg    xleft_blk_n;
reg    xright_blk_n;
reg    ytop_blk_n;
reg    ydown_blk_n;
reg    color1_blk_n;
reg    color2_blk_n;
reg    color3_blk_n;
reg    xleft_out_blk_n;
reg    ytop_out_blk_n;
reg    color1_out_blk_n;
reg    color2_out_blk_n;
reg    color3_out_blk_n;
reg   [10:0] j_0_i_reg_469;
reg   [15:0] xleft_read_reg_719;
reg    ap_block_state1;
reg   [15:0] xright_read_reg_724;
reg   [15:0] ytop_read_reg_730;
reg   [15:0] ydown_read_reg_735;
reg   [7:0] pix1_val_0_2_reg_740;
reg   [7:0] pix1_val_1_2_reg_745;
reg   [7:0] pix1_val_2_2_reg_750;
wire   [16:0] add_ln74_fu_484_p2;
reg   [16:0] add_ln74_reg_755;
wire   [16:0] add_ln74_1_fu_494_p2;
reg   [16:0] add_ln74_1_reg_760;
wire   [16:0] add_ln74_2_fu_504_p2;
reg   [16:0] add_ln74_2_reg_765;
wire   [16:0] add_ln74_3_fu_514_p2;
reg   [16:0] add_ln74_3_reg_770;
wire   [0:0] icmp_ln68_fu_524_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_fu_530_p2;
reg   [9:0] i_reg_779;
wire   [0:0] or_ln74_fu_560_p2;
reg   [0:0] or_ln74_reg_784;
wire   [0:0] and_ln74_fu_578_p2;
reg   [0:0] and_ln74_reg_789;
wire   [0:0] xor_ln74_fu_584_p2;
reg   [0:0] xor_ln74_reg_794;
wire   [0:0] icmp_ln70_fu_594_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_600_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln74_1_fu_658_p2;
reg   [0:0] and_ln74_1_reg_808;
wire   [0:0] and_ln74_4_fu_674_p2;
reg   [0:0] and_ln74_4_reg_815;
reg   [7:0] tmp_9_reg_822;
wire   [7:0] pix1_val_0_fu_686_p3;
reg   [7:0] pix1_val_0_reg_827;
wire   [7:0] pix1_val_1_fu_699_p3;
reg   [7:0] pix1_val_1_reg_832;
wire   [7:0] pix1_val_2_fu_712_p3;
reg   [7:0] pix1_val_2_reg_837;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] i_0_i_reg_458;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] zext_ln74_fu_480_p1;
wire   [16:0] zext_ln74_1_fu_490_p1;
wire   [16:0] zext_ln74_2_fu_500_p1;
wire   [16:0] zext_ln74_3_fu_510_p1;
wire   [15:0] zext_ln68_fu_520_p1;
wire   [16:0] zext_ln74_4_fu_541_p1;
wire   [0:0] icmp_ln74_fu_536_p2;
wire   [0:0] icmp_ln74_1_fu_545_p2;
wire   [0:0] icmp_ln74_3_fu_555_p2;
wire   [0:0] icmp_ln74_2_fu_550_p2;
wire   [0:0] or_ln74_1_fu_566_p2;
wire   [0:0] or_ln74_2_fu_572_p2;
wire   [15:0] zext_ln70_fu_590_p1;
wire   [0:0] icmp_ln74_5_fu_611_p2;
wire   [0:0] or_ln74_3_fu_616_p2;
wire   [0:0] icmp_ln74_4_fu_606_p2;
wire   [16:0] zext_ln74_5_fu_627_p1;
wire   [0:0] icmp_ln74_6_fu_631_p2;
wire   [0:0] icmp_ln74_7_fu_642_p2;
wire   [0:0] icmp_ln74_8_fu_647_p2;
wire   [0:0] or_ln74_4_fu_621_p2;
wire   [0:0] or_ln74_5_fu_636_p2;
wire   [0:0] or_ln74_6_fu_652_p2;
wire   [0:0] and_ln74_3_fu_668_p2;
wire   [0:0] and_ln74_2_fu_663_p2;
wire   [7:0] pix1_val_0_3_fu_680_p3;
wire   [7:0] pix1_val_1_3_fu_693_p3;
wire   [7:0] pix1_val_2_3_fu_706_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln68_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln68_fu_524_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln68_fu_524_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_458 <= i_reg_779;
    end else if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_458 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_fu_594_p2 == 1'd0))) begin
        j_0_i_reg_469 <= j_fu_600_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln68_fu_524_p2 == 1'd0))) begin
        j_0_i_reg_469 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln74_1_reg_760 <= add_ln74_1_fu_494_p2;
        add_ln74_2_reg_765 <= add_ln74_2_fu_504_p2;
        add_ln74_3_reg_770 <= add_ln74_3_fu_514_p2;
        add_ln74_reg_755 <= add_ln74_fu_484_p2;
        pix1_val_0_2_reg_740 <= color1_dout;
        pix1_val_1_2_reg_745 <= color2_dout;
        pix1_val_2_2_reg_750 <= color3_dout;
        xleft_read_reg_719 <= xleft_dout;
        xright_read_reg_724 <= xright_dout;
        ydown_read_reg_735 <= ydown_dout;
        ytop_read_reg_730 <= ytop_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_fu_594_p2 == 1'd0))) begin
        and_ln74_1_reg_808 <= and_ln74_1_fu_658_p2;
        and_ln74_4_reg_815 <= and_ln74_4_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln68_fu_524_p2 == 1'd0))) begin
        and_ln74_reg_789 <= and_ln74_fu_578_p2;
        or_ln74_reg_784 <= or_ln74_fu_560_p2;
        xor_ln74_reg_794 <= xor_ln74_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_779 <= i_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln70_reg_799 <= icmp_ln70_fu_594_p2;
        icmp_ln70_reg_799_pp0_iter1_reg <= icmp_ln70_reg_799;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0))) begin
        pix1_val_0_reg_827 <= pix1_val_0_fu_686_p3;
        pix1_val_1_reg_832 <= pix1_val_1_fu_699_p3;
        pix1_val_2_reg_837 <= pix1_val_2_fu_712_p3;
        tmp_9_reg_822 <= src_data_stream_3_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_594_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_blk_n = color1_empty_n;
    end else begin
        color1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_blk_n = color1_out_full_n;
    end else begin
        color1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_write = 1'b1;
    end else begin
        color1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_read = 1'b1;
    end else begin
        color1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_blk_n = color2_empty_n;
    end else begin
        color2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_blk_n = color2_out_full_n;
    end else begin
        color2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_write = 1'b1;
    end else begin
        color2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_read = 1'b1;
    end else begin
        color2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_blk_n = color3_empty_n;
    end else begin
        color3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_blk_n = color3_out_full_n;
    end else begin
        color3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_write = 1'b1;
    end else begin
        color3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_read = 1'b1;
    end else begin
        color3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_3_V_blk_n = dst_data_stream_3_V_full_n;
    end else begin
        dst_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_3_V_write = 1'b1;
    end else begin
        dst_data_stream_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_3_V_blk_n = src_data_stream_3_V_empty_n;
    end else begin
        src_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_reg_799 == 1'd0))) begin
        src_data_stream_3_V_read = 1'b1;
    end else begin
        src_data_stream_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_blk_n = xleft_empty_n;
    end else begin
        xleft_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_out_blk_n = xleft_out_full_n;
    end else begin
        xleft_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_out_write = 1'b1;
    end else begin
        xleft_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_read = 1'b1;
    end else begin
        xleft_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xright_blk_n = xright_empty_n;
    end else begin
        xright_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xright_read = 1'b1;
    end else begin
        xright_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ydown_blk_n = ydown_empty_n;
    end else begin
        ydown_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ydown_read = 1'b1;
    end else begin
        ydown_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_blk_n = ytop_empty_n;
    end else begin
        ytop_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_blk_n = ytop_out_full_n;
    end else begin
        ytop_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_write = 1'b1;
    end else begin
        ytop_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_read = 1'b1;
    end else begin
        ytop_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln68_fu_524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln70_fu_594_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln70_fu_594_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln74_1_fu_494_p2 = (zext_ln74_1_fu_490_p1 + 17'd4);

assign add_ln74_2_fu_504_p2 = (zext_ln74_2_fu_500_p1 + 17'd4);

assign add_ln74_3_fu_514_p2 = (zext_ln74_3_fu_510_p1 + 17'd4);

assign add_ln74_fu_484_p2 = (zext_ln74_fu_480_p1 + 17'd4);

assign and_ln74_1_fu_658_p2 = (or_ln74_reg_784 & or_ln74_4_fu_621_p2);

assign and_ln74_2_fu_663_p2 = (xor_ln74_reg_794 & or_ln74_5_fu_636_p2);

assign and_ln74_3_fu_668_p2 = (or_ln74_6_fu_652_p2 & or_ln74_4_fu_621_p2);

assign and_ln74_4_fu_674_p2 = (and_ln74_3_fu_668_p2 & and_ln74_2_fu_663_p2);

assign and_ln74_fu_578_p2 = (or_ln74_2_fu_572_p2 & or_ln74_1_fu_566_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln70_reg_799 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln70_reg_799_pp0_iter1_reg == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign color1_out_din = color1_dout;

assign color2_out_din = color2_dout;

assign color3_out_din = color3_dout;

assign dst_data_stream_0_V_din = pix1_val_0_reg_827;

assign dst_data_stream_1_V_din = pix1_val_1_reg_832;

assign dst_data_stream_2_V_din = pix1_val_2_reg_837;

assign dst_data_stream_3_V_din = tmp_9_reg_822;

assign i_fu_530_p2 = (i_0_i_reg_458 + 10'd1);

assign icmp_ln68_fu_524_p2 = ((i_0_i_reg_458 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_594_p2 = ((j_0_i_reg_469 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_545_p2 = ((zext_ln74_4_fu_541_p1 > add_ln74_reg_755) ? 1'b1 : 1'b0);

assign icmp_ln74_2_fu_550_p2 = ((zext_ln68_fu_520_p1 < ydown_read_reg_735) ? 1'b1 : 1'b0);

assign icmp_ln74_3_fu_555_p2 = ((zext_ln74_4_fu_541_p1 > add_ln74_3_reg_770) ? 1'b1 : 1'b0);

assign icmp_ln74_4_fu_606_p2 = ((zext_ln70_fu_590_p1 < xleft_read_reg_719) ? 1'b1 : 1'b0);

assign icmp_ln74_5_fu_611_p2 = ((zext_ln70_fu_590_p1 > xright_read_reg_724) ? 1'b1 : 1'b0);

assign icmp_ln74_6_fu_631_p2 = ((zext_ln74_5_fu_627_p1 > add_ln74_2_reg_765) ? 1'b1 : 1'b0);

assign icmp_ln74_7_fu_642_p2 = ((zext_ln70_fu_590_p1 < xright_read_reg_724) ? 1'b1 : 1'b0);

assign icmp_ln74_8_fu_647_p2 = ((zext_ln74_5_fu_627_p1 > add_ln74_1_reg_760) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_536_p2 = ((zext_ln68_fu_520_p1 < ytop_read_reg_730) ? 1'b1 : 1'b0);

assign j_fu_600_p2 = (j_0_i_reg_469 + 11'd1);

assign or_ln74_1_fu_566_p2 = (icmp_ln74_fu_536_p2 | icmp_ln74_3_fu_555_p2);

assign or_ln74_2_fu_572_p2 = (icmp_ln74_2_fu_550_p2 | icmp_ln74_1_fu_545_p2);

assign or_ln74_3_fu_616_p2 = (icmp_ln74_5_fu_611_p2 | and_ln74_reg_789);

assign or_ln74_4_fu_621_p2 = (or_ln74_3_fu_616_p2 | icmp_ln74_4_fu_606_p2);

assign or_ln74_5_fu_636_p2 = (icmp_ln74_6_fu_631_p2 | icmp_ln74_4_fu_606_p2);

assign or_ln74_6_fu_652_p2 = (icmp_ln74_8_fu_647_p2 | icmp_ln74_7_fu_642_p2);

assign or_ln74_fu_560_p2 = (icmp_ln74_fu_536_p2 | icmp_ln74_1_fu_545_p2);

assign pix1_val_0_3_fu_680_p3 = ((and_ln74_1_reg_808[0:0] === 1'b1) ? src_data_stream_0_V_dout : pix1_val_0_2_reg_740);

assign pix1_val_0_fu_686_p3 = ((and_ln74_4_reg_815[0:0] === 1'b1) ? src_data_stream_0_V_dout : pix1_val_0_3_fu_680_p3);

assign pix1_val_1_3_fu_693_p3 = ((and_ln74_1_reg_808[0:0] === 1'b1) ? src_data_stream_1_V_dout : pix1_val_1_2_reg_745);

assign pix1_val_1_fu_699_p3 = ((and_ln74_4_reg_815[0:0] === 1'b1) ? src_data_stream_1_V_dout : pix1_val_1_3_fu_693_p3);

assign pix1_val_2_3_fu_706_p3 = ((and_ln74_1_reg_808[0:0] === 1'b1) ? src_data_stream_2_V_dout : pix1_val_2_2_reg_750);

assign pix1_val_2_fu_712_p3 = ((and_ln74_4_reg_815[0:0] === 1'b1) ? src_data_stream_2_V_dout : pix1_val_2_3_fu_706_p3);

assign xleft_out_din = xleft_dout;

assign xor_ln74_fu_584_p2 = (or_ln74_fu_560_p2 ^ 1'd1);

assign ytop_out_din = ytop_dout;

assign zext_ln68_fu_520_p1 = i_0_i_reg_458;

assign zext_ln70_fu_590_p1 = j_0_i_reg_469;

assign zext_ln74_1_fu_490_p1 = xright_dout;

assign zext_ln74_2_fu_500_p1 = xleft_dout;

assign zext_ln74_3_fu_510_p1 = ytop_dout;

assign zext_ln74_4_fu_541_p1 = i_0_i_reg_458;

assign zext_ln74_5_fu_627_p1 = j_0_i_reg_469;

assign zext_ln74_fu_480_p1 = ydown_dout;

endmodule //Add_Rectangle
