// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Add_Char3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        src_data_stream_3_V_dout,
        src_data_stream_3_V_empty_n,
        src_data_stream_3_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n,
        dst_data_stream_3_V_write,
        ch3x_loc_dout,
        ch3x_loc_empty_n,
        ch3x_loc_read,
        ytop_s_dout,
        ytop_s_empty_n,
        ytop_s_read,
        char3_dout,
        char3_empty_n,
        char3_read,
        color1_dout,
        color1_empty_n,
        color1_read,
        color2_dout,
        color2_empty_n,
        color2_read,
        color3_dout,
        color3_empty_n,
        color3_read,
        ytop_out_din,
        ytop_out_full_n,
        ytop_out_write,
        color1_out_din,
        color1_out_full_n,
        color1_out_write,
        color2_out_din,
        color2_out_full_n,
        color2_out_write,
        color3_out_din,
        color3_out_full_n,
        color3_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
input  [7:0] src_data_stream_3_V_dout;
input   src_data_stream_3_V_empty_n;
output   src_data_stream_3_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
output  [7:0] dst_data_stream_3_V_din;
input   dst_data_stream_3_V_full_n;
output   dst_data_stream_3_V_write;
input  [15:0] ch3x_loc_dout;
input   ch3x_loc_empty_n;
output   ch3x_loc_read;
input  [15:0] ytop_s_dout;
input   ytop_s_empty_n;
output   ytop_s_read;
input  [7:0] char3_dout;
input   char3_empty_n;
output   char3_read;
input  [7:0] color1_dout;
input   color1_empty_n;
output   color1_read;
input  [7:0] color2_dout;
input   color2_empty_n;
output   color2_read;
input  [7:0] color3_dout;
input   color3_empty_n;
output   color3_read;
output  [15:0] ytop_out_din;
input   ytop_out_full_n;
output   ytop_out_write;
output  [7:0] color1_out_din;
input   color1_out_full_n;
output   color1_out_write;
output  [7:0] color2_out_din;
input   color2_out_full_n;
output   color2_out_write;
output  [7:0] color3_out_din;
input   color3_out_full_n;
output   color3_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg src_data_stream_3_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg dst_data_stream_3_V_write;
reg ch3x_loc_read;
reg ytop_s_read;
reg char3_read;
reg color1_read;
reg color2_read;
reg color3_read;
reg ytop_out_write;
reg color1_out_write;
reg color2_out_write;
reg color3_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] letter295_address0;
reg    letter295_ce0;
wire   [15:0] letter295_q0;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln155_reg_802;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    src_data_stream_3_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln155_reg_802_pp0_iter1_reg;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    dst_data_stream_3_V_blk_n;
reg    ch3x_loc_blk_n;
reg    ytop_s_blk_n;
reg    char3_blk_n;
reg    color1_blk_n;
reg    color2_blk_n;
reg    color3_blk_n;
reg    ytop_out_blk_n;
reg    color1_out_blk_n;
reg    color2_out_blk_n;
reg    color3_out_blk_n;
reg   [10:0] j_0_i_i_reg_472;
reg   [15:0] ytop_read_reg_728;
reg    ap_block_state1;
reg   [7:0] markpix_val_0_reg_733;
reg   [7:0] markpix_val_1_reg_738;
reg   [7:0] markpix_val_2_reg_743;
reg   [15:0] ch3x_loc_read_reg_748;
wire   [0:0] icmp_ln159_fu_483_p2;
reg   [0:0] icmp_ln159_reg_754;
wire   [16:0] zext_ln160_fu_489_p1;
reg   [16:0] zext_ln160_reg_759;
wire   [16:0] add_ln160_fu_493_p2;
reg   [16:0] add_ln160_reg_764;
wire   [10:0] zext_ln162_cast_fu_503_p3;
reg   [10:0] zext_ln162_cast_reg_769;
wire   [16:0] add_ln163_fu_515_p2;
reg   [16:0] add_ln163_reg_774;
wire   [9:0] i_fu_531_p2;
reg   [9:0] i_reg_782;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln153_fu_525_p2;
wire   [0:0] xor_ln160_fu_593_p2;
reg   [0:0] xor_ln160_reg_792;
reg   [15:0] p_Val2_s_reg_797;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln155_fu_603_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_609_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] p_Result_s_fu_665_p2;
reg   [0:0] p_Result_s_reg_811;
wire   [0:0] and_ln163_1_fu_676_p2;
reg   [0:0] and_ln163_1_reg_818;
wire   [7:0] tmp_fu_700_p3;
reg   [7:0] tmp_reg_826;
wire   [7:0] tmp_34_fu_707_p3;
reg   [7:0] tmp_34_reg_831;
wire   [7:0] tmp_35_fu_714_p3;
reg   [7:0] tmp_35_reg_836;
wire   [7:0] tmp_36_fu_721_p3;
reg   [7:0] tmp_36_reg_841;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [9:0] i_0_i_i_reg_461;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln162_fu_566_p1;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] trunc_ln163_fu_499_p1;
wire   [16:0] zext_ln163_fu_511_p1;
wire   [15:0] zext_ln153_fu_521_p1;
wire   [16:0] zext_ln161_fu_542_p1;
wire   [16:0] sub_ln161_fu_546_p2;
wire   [10:0] zext_ln162_1_cast_fu_551_p4;
wire   [10:0] add_ln162_fu_561_p2;
wire   [0:0] icmp_ln160_1_fu_571_p2;
wire   [0:0] xor_ln160_1_fu_576_p2;
wire   [0:0] or_ln160_fu_582_p2;
wire   [0:0] icmp_ln160_fu_537_p2;
wire   [0:0] or_ln160_1_fu_587_p2;
wire   [15:0] zext_ln155_fu_599_p1;
wire   [0:0] icmp_ln163_fu_615_p2;
wire   [16:0] zext_ln163_1_fu_626_p1;
wire   [15:0] sub_ln164_fu_635_p2;
wire   [14:0] trunc_ln_fu_640_p4;
wire  signed [15:0] xos_fu_650_p1;
wire   [15:0] shl_ln791_fu_654_p2;
wire   [15:0] and_ln791_fu_660_p2;
wire   [0:0] icmp_ln163_1_fu_630_p2;
wire   [0:0] and_ln163_fu_671_p2;
wire   [0:0] xor_ln163_fu_620_p2;
wire   [7:0] select_ln165_fu_682_p3;
wire   [7:0] select_ln165_1_fu_688_p3;
wire   [7:0] select_ln165_2_fu_694_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

Add_Char1_letter #(
    .DataWidth( 16 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
letter295_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(letter295_address0),
    .ce0(letter295_ce0),
    .q0(letter295_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln153_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_i_reg_461 <= i_reg_782;
    end else if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_461 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_fu_603_p2 == 1'd0))) begin
        j_0_i_i_reg_472 <= j_fu_609_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_i_i_reg_472 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln160_reg_764 <= add_ln160_fu_493_p2;
        add_ln163_reg_774 <= add_ln163_fu_515_p2;
        ch3x_loc_read_reg_748 <= ch3x_loc_dout;
        icmp_ln159_reg_754 <= icmp_ln159_fu_483_p2;
        markpix_val_0_reg_733 <= color1_dout;
        markpix_val_1_reg_738 <= color2_dout;
        markpix_val_2_reg_743 <= color3_dout;
        ytop_read_reg_728 <= ytop_s_dout;
        zext_ln160_reg_759[15 : 0] <= zext_ln160_fu_489_p1[15 : 0];
        zext_ln162_cast_reg_769[10 : 5] <= zext_ln162_cast_fu_503_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_fu_603_p2 == 1'd0))) begin
        and_ln163_1_reg_818 <= and_ln163_1_fu_676_p2;
        p_Result_s_reg_811 <= p_Result_s_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_782 <= i_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln155_reg_802 <= icmp_ln155_fu_603_p2;
        icmp_ln155_reg_802_pp0_iter1_reg <= icmp_ln155_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_797 <= letter295_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0))) begin
        tmp_34_reg_831 <= tmp_34_fu_707_p3;
        tmp_35_reg_836 <= tmp_35_fu_714_p3;
        tmp_36_reg_841 <= tmp_36_fu_721_p3;
        tmp_reg_826 <= tmp_fu_700_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln153_fu_525_p2 == 1'd0))) begin
        xor_ln160_reg_792 <= xor_ln160_fu_593_p2;
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_603_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ch3x_loc_blk_n = ch3x_loc_empty_n;
    end else begin
        ch3x_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ch3x_loc_read = 1'b1;
    end else begin
        ch3x_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char3_blk_n = char3_empty_n;
    end else begin
        char3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char3_read = 1'b1;
    end else begin
        char3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_blk_n = color1_empty_n;
    end else begin
        color1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_blk_n = color1_out_full_n;
    end else begin
        color1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_write = 1'b1;
    end else begin
        color1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_read = 1'b1;
    end else begin
        color1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_blk_n = color2_empty_n;
    end else begin
        color2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_blk_n = color2_out_full_n;
    end else begin
        color2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_write = 1'b1;
    end else begin
        color2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_read = 1'b1;
    end else begin
        color2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_blk_n = color3_empty_n;
    end else begin
        color3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_blk_n = color3_out_full_n;
    end else begin
        color3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_write = 1'b1;
    end else begin
        color3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_read = 1'b1;
    end else begin
        color3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_3_V_blk_n = dst_data_stream_3_V_full_n;
    end else begin
        dst_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0))) begin
        dst_data_stream_3_V_write = 1'b1;
    end else begin
        dst_data_stream_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        letter295_ce0 = 1'b1;
    end else begin
        letter295_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_3_V_blk_n = src_data_stream_3_V_empty_n;
    end else begin
        src_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_802 == 1'd0))) begin
        src_data_stream_3_V_read = 1'b1;
    end else begin
        src_data_stream_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_blk_n = ytop_out_full_n;
    end else begin
        ytop_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_write = 1'b1;
    end else begin
        ytop_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_s_blk_n = ytop_s_empty_n;
    end else begin
        ytop_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_s_read = 1'b1;
    end else begin
        ytop_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln153_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln155_fu_603_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln155_fu_603_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_493_p2 = (17'd64 + zext_ln160_fu_489_p1);

assign add_ln162_fu_561_p2 = (zext_ln162_cast_reg_769 + zext_ln162_1_cast_fu_551_p4);

assign add_ln163_fu_515_p2 = (17'd32 + zext_ln163_fu_511_p1);

assign and_ln163_1_fu_676_p2 = (xor_ln163_fu_620_p2 & and_ln163_fu_671_p2);

assign and_ln163_fu_671_p2 = (xor_ln160_reg_792 & icmp_ln163_1_fu_630_p2);

assign and_ln791_fu_660_p2 = (shl_ln791_fu_654_p2 & p_Val2_s_reg_797);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char3_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch3x_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((src_data_stream_3_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (icmp_ln155_reg_802 == 1'd0)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = (((dst_data_stream_3_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (icmp_ln155_reg_802_pp0_iter1_reg == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign color1_out_din = color1_dout;

assign color2_out_din = color2_dout;

assign color3_out_din = color3_dout;

assign dst_data_stream_0_V_din = tmp_reg_826;

assign dst_data_stream_1_V_din = tmp_34_reg_831;

assign dst_data_stream_2_V_din = tmp_35_reg_836;

assign dst_data_stream_3_V_din = tmp_36_reg_841;

assign i_fu_531_p2 = (i_0_i_i_reg_461 + 10'd1);

assign icmp_ln153_fu_525_p2 = ((i_0_i_i_reg_461 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_603_p2 = ((j_0_i_i_reg_472 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_483_p2 = ((char3_dout == 8'd26) ? 1'b1 : 1'b0);

assign icmp_ln160_1_fu_571_p2 = ((zext_ln161_fu_542_p1 < add_ln160_reg_764) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_537_p2 = ((zext_ln153_fu_521_p1 < ytop_read_reg_728) ? 1'b1 : 1'b0);

assign icmp_ln163_1_fu_630_p2 = ((zext_ln163_1_fu_626_p1 < add_ln163_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_615_p2 = ((zext_ln155_fu_599_p1 < ch3x_loc_read_reg_748) ? 1'b1 : 1'b0);

assign j_fu_609_p2 = (j_0_i_i_reg_472 + 11'd1);

assign letter295_address0 = zext_ln162_fu_566_p1;

assign or_ln160_1_fu_587_p2 = (or_ln160_fu_582_p2 | icmp_ln160_fu_537_p2);

assign or_ln160_fu_582_p2 = (xor_ln160_1_fu_576_p2 | icmp_ln159_reg_754);

assign p_Result_s_fu_665_p2 = ((and_ln791_fu_660_p2 == 16'd0) ? 1'b1 : 1'b0);

assign select_ln165_1_fu_688_p3 = ((p_Result_s_reg_811[0:0] === 1'b1) ? 8'd255 : markpix_val_1_reg_738);

assign select_ln165_2_fu_694_p3 = ((p_Result_s_reg_811[0:0] === 1'b1) ? 8'd255 : markpix_val_2_reg_743);

assign select_ln165_fu_682_p3 = ((p_Result_s_reg_811[0:0] === 1'b1) ? 8'd255 : markpix_val_0_reg_733);

assign shl_ln791_fu_654_p2 = 16'd1 << xos_fu_650_p1;

assign sub_ln161_fu_546_p2 = (zext_ln161_fu_542_p1 - zext_ln160_reg_759);

assign sub_ln164_fu_635_p2 = (zext_ln155_fu_599_p1 - ch3x_loc_read_reg_748);

assign tmp_34_fu_707_p3 = ((and_ln163_1_reg_818[0:0] === 1'b1) ? select_ln165_1_fu_688_p3 : src_data_stream_1_V_dout);

assign tmp_35_fu_714_p3 = ((and_ln163_1_reg_818[0:0] === 1'b1) ? select_ln165_2_fu_694_p3 : src_data_stream_2_V_dout);

assign tmp_36_fu_721_p3 = ((and_ln163_1_reg_818[0:0] === 1'b1) ? 8'd0 : src_data_stream_3_V_dout);

assign tmp_fu_700_p3 = ((and_ln163_1_reg_818[0:0] === 1'b1) ? select_ln165_fu_682_p3 : src_data_stream_0_V_dout);

assign trunc_ln163_fu_499_p1 = char3_dout[5:0];

assign trunc_ln_fu_640_p4 = {{sub_ln164_fu_635_p2[15:1]}};

assign xor_ln160_1_fu_576_p2 = (icmp_ln160_1_fu_571_p2 ^ 1'd1);

assign xor_ln160_fu_593_p2 = (or_ln160_1_fu_587_p2 ^ 1'd1);

assign xor_ln163_fu_620_p2 = (icmp_ln163_fu_615_p2 ^ 1'd1);

assign xos_fu_650_p1 = $signed(trunc_ln_fu_640_p4);

assign ytop_out_din = ytop_s_dout;

assign zext_ln153_fu_521_p1 = i_0_i_i_reg_461;

assign zext_ln155_fu_599_p1 = j_0_i_i_reg_472;

assign zext_ln160_fu_489_p1 = ytop_s_dout;

assign zext_ln161_fu_542_p1 = i_0_i_i_reg_461;

assign zext_ln162_1_cast_fu_551_p4 = {{sub_ln161_fu_546_p2[11:1]}};

assign zext_ln162_cast_fu_503_p3 = {{trunc_ln163_fu_499_p1}, {5'd0}};

assign zext_ln162_fu_566_p1 = add_ln162_fu_561_p2;

assign zext_ln163_1_fu_626_p1 = j_0_i_i_reg_472;

assign zext_ln163_fu_511_p1 = ch3x_loc_dout;

always @ (posedge ap_clk) begin
    zext_ln160_reg_759[16] <= 1'b0;
    zext_ln162_cast_reg_769[4:0] <= 5'b00000;
end

endmodule //Add_Char3
